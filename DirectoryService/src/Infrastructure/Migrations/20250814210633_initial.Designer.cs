// <auto-generated />
using System;
using System.Collections.Generic;
using Infrastructure.DBContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250814210633_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.ComplexProperty<Dictionary<string, object>>("CreatedAt", "Domain.Entities.Department.CreatedAt#CreatedAt", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Value")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Identifier", "Domain.Entities.Department.Identifier#Identifier", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("identifier");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("IsActive", "Domain.Entities.Department.IsActive#IsActive", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("Value")
                                .HasColumnType("boolean")
                                .HasColumnName("is_active");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Domain.Entities.Department.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("UpdatedAt", "Domain.Entities.Department.UpdatedAt#UpdatedAt", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Value")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("updated_at");
                        });

                    b.HasKey("Id")
                        .HasName("pk_departments");

                    b.HasIndex("ParentId");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.ComplexProperty<Dictionary<string, object>>("Address", "Domain.Entities.Location.Address#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Apartment")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("apartment");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("country");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("street");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("CreatedAt", "Domain.Entities.Location.CreatedAt#CreatedAt", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Value")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("IsActive", "Domain.Entities.Location.IsActive#IsActive", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("Value")
                                .HasColumnType("boolean")
                                .HasColumnName("is_active");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Domain.Entities.Location.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("TimeZone", "Domain.Entities.Location.TimeZone#TimeZone", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("timezone");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("UpdatedAt", "Domain.Entities.Location.UpdatedAt#UpdatedAt", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Value")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("updated_at");
                        });

                    b.HasKey("Id")
                        .HasName("pk_locations");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("position_id");

                    b.ComplexProperty<Dictionary<string, object>>("CreatedAt", "Domain.Entities.Position.CreatedAt#CreatedAt", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Value")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("IsActive", "Domain.Entities.Position.IsActive#IsActive", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("Value")
                                .HasColumnType("boolean")
                                .HasColumnName("is_active");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Domain.Entities.Position.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("UpdatedAt", "Domain.Entities.Position.UpdatedAt#UpdatedAt", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Value")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("updated_at");
                        });

                    b.HasKey("Id")
                        .HasName("pk_positions");

                    b.ToTable("positions", (string)null);
                });

            modelBuilder.Entity("department_location", b =>
                {
                    b.Property<Guid>("department_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("location_id")
                        .HasColumnType("uuid");

                    b.HasKey("department_id", "location_id")
                        .HasName("pk_department_location");

                    b.HasIndex("location_id");

                    b.ToTable("department_location");
                });

            modelBuilder.Entity("department_position", b =>
                {
                    b.Property<Guid>("department_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("position_id")
                        .HasColumnType("uuid");

                    b.HasKey("department_id", "position_id")
                        .HasName("pk_department_position");

                    b.HasIndex("position_id");

                    b.ToTable("department_position");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.HasOne("Domain.Entities.Department", "Parent")
                        .WithMany("Departments")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fr_departments_parent");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Domain.Entities.Position", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.Position.Description", "Description", b1 =>
                        {
                            b1.Property<Guid>("PositionId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasColumnType("text")
                                .HasColumnName("description");

                            b1.HasKey("PositionId");

                            b1.ToTable("positions");

                            b1.WithOwner()
                                .HasForeignKey("PositionId");
                        });

                    b.Navigation("Description");
                });

            modelBuilder.Entity("department_location", b =>
                {
                    b.HasOne("Domain.Entities.Department", null)
                        .WithMany()
                        .HasForeignKey("department_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_department_location_department_id");

                    b.HasOne("Domain.Entities.Location", null)
                        .WithMany()
                        .HasForeignKey("location_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_department_location_location_id");
                });

            modelBuilder.Entity("department_position", b =>
                {
                    b.HasOne("Domain.Entities.Department", null)
                        .WithMany()
                        .HasForeignKey("department_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_department_location_department_id");

                    b.HasOne("Domain.Entities.Position", null)
                        .WithMany()
                        .HasForeignKey("position_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_department_location_position_id");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Navigation("Departments");
                });
#pragma warning restore 612, 618
        }
    }
}
